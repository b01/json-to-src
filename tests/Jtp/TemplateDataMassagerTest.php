<?php namespace Jtp\Tests;

use Jtp\Tests\Mocks\JtpDataMassage;

/**
 * Class TemplateDataMassagerTest
 *
 * @package \Jtp\Tests
 * @coversDefaultClass \Jtp\TemplateDataMassage
 */
class TemplateDataMassagerTest extends \PHPUnit_Framework_TestCase
{
    /** @var \Jtp\TemplateDataMassage */
    private $mockTemplateDataMassager;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->jtpDataMassage = new JtpDataMassage();
        // -v -t -u tests/tmp/test -a protected -n Foos -c tests/Mocks/preTemplateCallback.php tests/fixtures/test-5.json Company tests/tmp/src
    }

    /**
     * @covers ::__invoke
     * @covers ::doRenaming
     * @uses \Jtp\TemplateDataMassage::renameNamespace
     * @uses \Jtp\TemplateDataMassage::renameProperties
     */
    public function testCanRenameAClass()
    {
        $jtpDataMassage = new JtpDataMassage();
        $classKey = 'Location';
        $fixture = [
            'name' => 'Location',
            'fullName' => '',
            'classNamespace' => '',
            'properties' => []
        ];

        $jtpDataMassage->setClassMapKey($classKey, 'Loc');
        $actual = $jtpDataMassage($classKey, $fixture);

        $this->assertEquals('Loc', $actual['name']);
    }

    /**
     * @covers ::renameNamespace
     * @uses \Jtp\TemplateDataMassage::__invoke
     * @uses \Jtp\TemplateDataMassage::doRenaming
     * @uses \Jtp\TemplateDataMassage::renameProperties
     */
    public function testCanRenameNamespace()
    {
        $jtpDataMassage = new JtpDataMassage();
        $classKey = 'Location';
        $namespaceKey = 'Foos';
        $fixture = [
            'name' => '',
            'fullName' => '',
            'classNamespace' => $namespaceKey,
            'properties' => []
        ];

        $jtpDataMassage->setNamespaceMapKey($namespaceKey, 'Foo');
        $actual = $jtpDataMassage($classKey, $fixture);

        $this->assertEquals('Foo', $actual['classNamespace']);
    }

    /**
     * @covers ::renameProperties
     * @uses \Jtp\TemplateDataMassage::__invoke
     * @uses \Jtp\TemplateDataMassage::doRenaming
     * @uses \Jtp\TemplateDataMassage::renameNamespace
     */
    public function testCanRenameProperty()
    {
        $jtpDataMassage = new JtpDataMassage();
        $classKey = 'Employees';
        $namespaceKey = 'Foos';
        $fixture = [
            'name' => '',
            'fullName' => '',
            'classNamespace' => $namespaceKey,
            'properties' => [
                ['name' => 'first_name', 'namespace' => '']
            ]
        ];

        $jtpDataMassage->setClassMapKey('Employees::$first_name', 'firstName');
        $actual = $jtpDataMassage($classKey, $fixture);

        $this->assertEquals('firstName', $actual['properties'][0]['name']);
    }

    /**
     * @covers ::doRenaming
     * @uses \Jtp\TemplateDataMassage::__invoke
     * @uses \Jtp\TemplateDataMassage::doRenaming
     * @uses \Jtp\TemplateDataMassage::renameNamespace
     * @uses \Jtp\TemplateDataMassage::renameProperties
     */
    public function testCanRenameFullName()
    {
        $jtpDataMassage = new JtpDataMassage();
        $classKey = 'Employees';
        $namespaceKey = 'Foos';
        $fixture = [
            'name' => 'Employees',
            'fullName' => '',
            'classNamespace' => $namespaceKey,
            'properties' => []
        ];

        $jtpDataMassage->setClassMapKey($classKey, 'Employee');
        $jtpDataMassage->setNamespaceMapKey($namespaceKey, 'Foo');
        $actual = $jtpDataMassage($classKey, $fixture);

        $this->assertEquals('Foo\\Employee', $actual['fullName']);
    }
}
