<?php {%- if classNamespace is not empty %} namespace {{ classNamespace }};{% endif %}
{% autoescape false %}
{% set fullClassName = getFullNameSpace(classNamespace, className) %}
{{ useStmts }}

/**
 * Class {{ name }}
 */
class {{ name }}{{ classAttrs }}
{
    {{- traitStmts -}}

    {%- for classProp in properties %}

    /**
     * {{ getVarType(classProp, classNamespace) }}
     */
    {{classProp.access}} ${{classProp.name}};
    {% endfor %}

    /**
     * {{className}} Constructor
     */
    public function __construct()
    {
        {% spaceless %}
        {% for classProp in properties -%}
            {{ getPropStmt(classProp) }}
        {%- endfor %}
        {% endspaceless %}

    }
    {% for classProp in properties %}

    /**
     * Get {{classProp.name}}.
     *
     * @return {{ getReturnType(classProp) }}
     */
    public function get{{ classProp.name|ucfirst }}()
    {
        return $this->{{ classProp.name }};
    }

    {% if classProp.arrayType is not empty %}

    /**
     * Set {{classProp.name}}.
     *
     * @param \{{ classProp.arrayType }} ${{classProp.name}}
     * @return {{ getReturnType(classProp) }}
     */
    public function set{{classProp.name|ucfirst}}(\{{ classProp.arrayType }} ${{classProp.name}})
    {
        $this->{{getAssignProp(classProp)}} = ${{classProp.name}};

        return $this;
    }
    {% else %}

    /**
     * Set {{classProp.name}}.
     *
     * @param{% if classProp.paramType is not empty %} {% if classProp.isCustomType %}\{% endif %}{{ classProp.paramType }} {% endif %}${{classProp.name}}
     * @return \{{fullClassName}}
     */
    public function set{{classProp.name|ucfirst}}({{getFuncType(classProp, classNamespace)}}${{classProp.name}})
    {
        $this->{{getAssignProp(classProp)}} = ${{classProp.name}};

        return $this;
    }
    {% endif %}
    {%- endfor %}

}
{% endautoescape %}

?>
