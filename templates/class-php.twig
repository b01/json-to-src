<?php {%- if classNamespace is not empty %} namespace {{classNamespace}};{% endif %}
{% autoescape false %}
{% set fullClassName = getFullNameSpace(classNamespace, className) %}

/**
 * Class {{className}}
 */
class {{className}}
{
    {%- for classProp in classProperties %}

    /**
     * @var {{classProp.paramType}}
     */
    private ${{classProp.name}};
    {% endfor %}

    /**
     * {{className}} Constructor
     */
    public function __construct()
    {
        {% spaceless %}
        {% for classProp in classProperties -%}
            {{ setPropVal(classProp.name, classProp.value, classProp.type) }}
        {%- endfor %}
        {% endspaceless %}

    }
    {% for classProp in classProperties %}

    /**
     * Get {{classProp.name}}.
     *
     * @return {{classProp.type}}.
     */
    public function get{{classProp.name|capitalize }}()
    {
        return $this->{{classProp.name}};
    }

    /**
     * Set {{classProp.name}}.
     *
     * @param {{getFuncType(classProp)}} ${{classProp.name}}
     * @return \{{fullClassName}}
     */
    public function set{{classProp.name|ucfirst}}({{getFuncType(classProp)}}${{classProp.name}})
    {
        $this->{{getAssignProp(classProp)}} = ${{classProp.name}};

        return $this;
    }
    {% endfor %}

}{% endautoescape %}
?>
