<?php {%- if classNamespace is not empty %} namespace {{classNamespace}}\Tests; {% endif %}

{% autoescape false %}
{% set fullClassName = getFullNameSpace(classNamespace, name) %}

use {{ fullClassName }};{{ useStmts }}

/**
 * Class {{ name }}Test
 *
 * @coversDefaultClass \{{fullClassName}}
 */
class {{ name }}Tests extends \PHPUnit_Framework_TestCase
{
    /**
     * @covers ::__construct
     */
    public function testCanInitialize{{ name }}()
    {
        $subject = new {{ name }}();

        $this->assertInstanceOf({{ name }}::class, $subject);
    }
{% for classProp in properties %}

    /**
     * @covers ::get{{classProp.name|ucfirst}}
     * @covers ::set{{classProp.name|ucfirst}}
     * @uses \{{fullClassName}}::__construct
     */
    public function testCanSetAndGet{{classProp.name|ucfirst }}()
    {
        $subject = new {{ name }}();
    {% if classProp.arrayType is not empty %}

        $mock = $this->getMockBuilder(\{{ getFullNameSpace(classNamespace, classProp.arrayType) }}::class)
            ->disableOriginalConstructor()
            ->getMock();
        $subject->set{{ classProp.name|ucfirst }}($mock);
        $actual = $subject->get{{classProp.name|ucfirst}}();

        $this->assertInstanceOf(\{{ getFullNameSpace(classNamespace, classProp.arrayType) }}::class, $actual[0]);
    {% elseif classProp.isCustomType %}

        $mock = $this->getMockBuilder(\{{ getFullNameSpace(classNamespace, classProp.type) }}::class)
        ->disableOriginalConstructor()
        ->getMock();

        $subject->set{{classProp.name|ucfirst}}($mock);
        $actual = $subject->get{{classProp.name|ucfirst}}();

        $this->assertInstanceOf(\{{ getFullNameSpace(classNamespace, classProp.type) }}::class, $actual);
    {% else -%}
        {% spaceless %}
        {% if classProp.type is same as('boolean') %}
            {% set fixture = 'true' %}
        {% elseif classProp.type is same as('integer') %}
            {% set fixture = '1234' %}
        {% elseif classProp.type is same as('NULL') %}
            {% set fixture = 'null' %}
        {% elseif classProp.type is same as('string') %}
            {% set fixture = "'test1234'" %}
        {% else %}
            {% set fixture = classProp.value %}
        {% endif %}
        {% endspaceless %}

        $subject->set{{classProp.name|ucfirst}}({{ fixture }});

        $actual = $subject->get{{classProp.name|ucfirst}}();

        {% if classProp.type is same as('NULL') -%}
            $this->assertNull($actual);
        {%- elseif classProp.type is same as('string') -%}
            $this->assertEquals('test1234', $actual);
        {%- elseif classProp.type is same as('boolean') -%}
            $this->assertTrue($actual);
        {%- elseif classProp.type is same as('integer') and classProp.value -%}
            $this->assertEquals(1234, $actual);
        {%- else -%}
            $this->assertEquals({{fixture}}, $actual);
        {% endif %}
    {% endif %}

    }
{% endfor %}
}

{% endautoescape %}
?>
